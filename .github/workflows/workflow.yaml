name: Terraform Deployment

on:
  push:
    branches:
      - main
      - staging
  delete:
    branches:
      - main
  pull_request:
    types:
      - closed

env:
  AWS_REGION: us-east-2
  TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}
  TF_VAR_proxmox_api_token_secret: ${{ secrets.PROXMOX_API_TOKEN_SECRET }}
  TF_VAR_proxmox_api_url: ${{ secrets.PROXMOX_API_URL }}
  TF_VAR_proxmox_api_token_id: ${{ secrets.PROXMOX_API_TOKEN_ID }}
  TF_VAR_cipassword: ${{ secrets.d }}
  DYNAMODB_TABLE: terraform-remote-state-dynamo
  VM_NAME: ''
jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      - name: Connect Tailscale
        uses: tailscale/github-action@v1
        with:
            authkey: ${{ secrets.TAILSCALE_AUTHKEY }}
            version: 1.20.0
   

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Initialize Terraform
        run: |
          echo 'terraform {' > backend.tf
          echo '  required_version = ">= 1.0.0"' >> backend.tf
          echo '' >> backend.tf
          echo '  backend "s3" {' >> backend.tf
          echo '    bucket = "absent-terraform-remote-state-bucket"' >> backend.tf
          echo '    key    = "s3/test/state.tfstate"' >> backend.tf
          echo '    region = "${{ env.AWS_REGION }}"' >> backend.tf
          echo '    dynamodb_table = "${{ env.DYNAMODB_TABLE }}"' >> backend.tf
          echo '    encrypt = true' >> backend.tf
          echo '  }' >> backend.tf
          echo '}' >> backend.tf
          terraform init


      - name: Terraform Plan
        if: github.event_name == 'push'
        run: terraform plan 

      - name: Apply Terraform Changes
        if: github.event_name == 'push'
        run: terraform apply -auto-approve 

  plan:
    needs: setup
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  destroy:
    needs: deploy
    if: github.event_name == 'delete' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure Tailscale
        uses: tailscale/setup-tailscale@v1
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}
          version: 1.20.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform
        run: |
          terraform init \
            -backend-config="absent-terraform-remote-state-bucket" \
            -backend-config="key=${{ env.VM_NAME }}/state.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=terraform-remote-state-dynamo"

      - name: Destroy Terraform Resources
        run: terraform destroy -auto-approve -var="variable1=${{ env.TF_VAR_variable1 }}" -var="variable2=${{ env.TF_VAR_variable2 }}"
